import os

import random



#Source: http://codereview.stackexchange.com/questions/82103/ascii-fication-of-playing-cards



CARD = """\

┌───────┐

│{}     │

│       │

│   {}  │

│       │

│     {}│

└───────┘

""".format('{trank:^2}', '{suit: <2}', '{brank:^2}')



TEN = """\

┌───────┐

│{}    │

│       │

│   {}  │

│       │

│    {}│

└───────┘

""".format('{trank:^3}', '{suit: <2}', '{brank:^3}')



FACECARD = """\

┌───────┐

│{}│

│       │

│   {}  │

│       │

│{}│

└───────┘

""".format('{trank:<7}', '{suit: <2}', '{brank:>7}')



HIDDEN_CARD = """\

┌───────┐

│░░░░░░░│

│░░░░░░░│

│░░░░░░░│

│░░░░░░░│

│░░░░░░░│

└───────┘

"""



class Card(object):

    

    def __init__(self, suit, rank):

        """

        :param suit: The face of the card, e.g. Spade or Diamond

        :param rank: The value of the card, e.g 3 or King

        """



        self.ranks = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King","Ace"]







        self.card_values = {

            '2': 2,

            '3': 3,

            '4': 4,

            '5': 5,

            '6': 6,

            '7': 7,

            '8': 8,

            '9': 9,

            '10': 10,

            'Jack': 11,

            'Queen': 12,

            'King': 13,

            'Ace': 14,  # value of the ace is high until it needs to be low

        }



        self.str_values = {

            '2': CARD,

            '3': CARD,

            '4': CARD,

            '5': CARD,

            '6': CARD,

            '7': CARD,

            '8': CARD,

            '9': CARD,

            '10': TEN,

            'Jack': FACECARD,

            'Queen': FACECARD,

            'King': FACECARD,

            'Ace': FACECARD,  # value of the ace is high until it needs to be low

        }



        self.suits = ['Spades','Hearts','Diamonds','Clubs']



        self.symbols = {

            'Spades':   '♠',

            'Diamonds': '♦',

            'Hearts':   '♥',

            'Clubs':    '♣',

        }





        if type(suit) is int:

            self.suit = self.suits[suit]

        else:

            self.suit = suit.capitalize()

        self.rank = str(rank)

        self.symbol = self.symbols[self.suit]

        self.points = self.card_values[str(rank)]

        self.ascii = self.__str__()

    



    def __str__(self):

        symbol = self.symbols[self.suit]

        trank = self.rank+symbol

        brank = symbol+self.rank

        return self.str_values[self.rank].format(trank=trank, suit=symbol,brank=brank)

           

    def __cmp__(self,other):

        

        return self.ranks.index(self.rank) < self.ranks.index(other.rank) 

   

    # Python3 wasn't liking the __cmp__ to sort the cards, so 

    # documentation told me to use the __lt__ (less than) 

    # method.

    def __lt__(self,other):

        return self.__cmp__(other)



"""

@Class Deck 

@Description:

    This class represents a deck of cards. 

@Methods:

    pop_cards() - removes a card from top of deck

    add_card(card) - adds a card to bottom of deck

    shuffle() - shuffles deck

    sort() - sorts the deck based on value, not suit (could probaly be improved based on need)

"""       

class Deck(object):

    def __init__(self):

        #assume top of deck = 0th element

        self.cards = []

        for suit in range(4):

            for rank in ["2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King","Ace"]:

                self.cards.append(Card(suit,rank))

                

    def __str__(self):

        res = []

        for card in self.cards:

            res.append(str(card))

        return "".join(res)

    

    def pop_card(self):

        return self.cards.pop(0)

        

    def add_card(self,card):

        self.cards.append(card)

        

    def shuffle(self):

        random.shuffle(self.cards)

    

    def sort(self):

        self.cards = sorted(self.cards)



class Hand(list):

    def __init__(self, cards=None):

        """Initialize the class"""

        super().__init__()

        if (cards is not None):

            self._list = list(cards)

        else:

            self._list = []

    

    def __str__(self):

        return self.join_lines()



    def join_lines(self):

        """

        Stack strings horizontally.

        This doesn't keep lines aligned unless the preceding lines have the same length.

        :param strings: Strings to stack

        :return: String consisting of the horizontally stacked input

        """

        liness = [card.ascii.splitlines() for card in self._list]

        return '\n'.join(''.join(lines) for lines in zip(*liness))

        

    def add(self,card):

        self._list.append(card)

        

    def sort(self):

        self._list = sorted(self._list)

        

    def __getitem__(self,key):

        return self._list[key]

    



player1 = Hand()
player2 = Hand()
warp1 = Hand()
warp2 = Hand()

D = Deck()

D.shuffle()
 
for i in range(26):
    player1.add(D.pop_card())  
    player2.add(D.pop_card())
    
    
end = False

while end is False:
  
  
  p1 = player1[i]
  p2 = player2[i]
  
  print(p1)
  print(p2)
    
  if player1[i].__lt__(player2[i]):
    player2.append(p1)
    player2.append(p2)
    
  else:
    player1.append(p1)
    player1.append(p2)
    
  if player1[i].__eq__(player2[i]):
    for i in range(3):
      warp1.add(player1.get_item())
    for i in range(3):
      warp2.add(player2.get_item())
    if warp1[3].__lt__(warp2[3]): 
      for i in range(3):
        player2.add(warp1.get_item())
      for i in range(3):
        player2.add(warp2.get_item())
    else:
      for i in range(3):
        player1.add(warp1.get_item())
      for i in range(3):
        player1.add(warp2.get_item())


  if len(player1) is 0:
    end = True
  if len(player2) is 0:
    end = True
  else:
    end = False

